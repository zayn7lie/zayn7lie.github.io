<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>C&#43;&#43; on zayn_lie&#39;s blog</title>
        <link>/categories/c&#43;&#43;/</link>
        <description>Recent content in C&#43;&#43; on zayn_lie&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 26 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="/categories/c++/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>从0开始的C&#43;&#43;语言基础02：头文件</title>
        <link>/posts/c&#43;&#43;/cpp-02headfile/</link>
        <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>/posts/c&#43;&#43;/cpp-02headfile/</guid>
        <description>&lt;h3 id=&#34;why-为什么我们要使用头文件&#34;&gt;WHY: 为什么我们要使用头文件？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;上节课我们已经了解了函数的结构及作用。实际上，存在这各种各样奇奇怪怪且复杂的函数，例如 &lt;em&gt;打印函数&lt;/em&gt; &lt;code&gt;printf()&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;__format, ...){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; __retval;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __retval &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __mingw_vfprintf( stdout, __format, __local_argv );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __builtin_va_end( __local_argv );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; __retval;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;该函数的作用就是我们上节课提及的 &lt;em&gt;输出&lt;/em&gt; 或者 &lt;em&gt;打印&lt;/em&gt; 函数。而且这一段只是函数的主题部分，还有各种涉及计算机底层端口的各种调用和参数。&lt;/li&gt;
&lt;li&gt;如果我们需要使用自己写一遍绝对是非常没有效率的行为。而且如果真的要求记忆这么大段内容这就不是理科竞赛的目的了。因此， c++ 已经帮我们写好了，而我们只需要通过一些小 tricks 就可以调用这些函数了 —— 使用头文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-什么是头文件&#34;&gt;WHAT: 什么是头文件？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;存储了一些函数的文件，方便我们编写程序。&lt;/li&gt;
&lt;li&gt;一般放在需要调用头文件程序（或函数）的头部（开始）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-怎么使用头文件&#34;&gt;HOW: 怎么使用头文件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt; //调用头文件&amp;lt;cstdio&amp;gt; 该头文件里包含 printf() 函数&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//&amp;#34;Hello, world!&amp;#34;打印出来/输出到终端（屏幕）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;接下来课程，我会在程序中使用 &lt;code&gt;//&lt;/code&gt; 添加注解方便大家的理解，这些 &lt;code&gt;//&lt;/code&gt; 之后的同行内容将被编译器忽略。相似的注解方式还有 &lt;code&gt;/* 注解内容 */&lt;/code&gt; 等。&lt;/li&gt;
&lt;li&gt;我们发现上面的程序多了个 &lt;code&gt;#include&amp;lt;cstdio&amp;gt;&lt;/code&gt; ，头文件的调用就是简简单单通过 &lt;code&gt;#include&amp;lt;头文件&amp;gt;&lt;/code&gt; 来进行的。&lt;/li&gt;
&lt;li&gt;大家发现我们并没有定义 &lt;code&gt;printf()&lt;/code&gt; ，实际上这个函数已经被定义在 &lt;code&gt;cstdio&lt;/code&gt; 头文件里了，所以我们是可以直接使用该函数的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;标准输入输出函数&#34;&gt;标准输入输出函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;接下来，我们将沿着 &lt;code&gt;printf()&lt;/code&gt; 这个重要的函数，讲一讲输入和输出的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;why-为什么存在输入输出还需要标准&#34;&gt;WHY: 为什么存在输入输出，还需要“标准”？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;输入相当于我们把我们的需求输入计算机，计算机最终返回我们需要的结果。&lt;/li&gt;
&lt;li&gt;输入设备和输出设备千奇百怪，什么都有。例如文件输入，终端输入等等。这些输入输出的格式也不一样&lt;/li&gt;
&lt;li&gt;因此，我们需要让程序有统一的输入和输出格式和设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;what-那什么是标准输入输出呢&#34;&gt;WHAT: 那什么是标准输入输出呢？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;标准输入输出是全由终端进行输入和输出的一种方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;how-怎么进行输入输出&#34;&gt;HOW: 怎么进行输入输出？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;首先，我要先说明，我并不推荐有些教练所述通过输入输出流进行输入输出（ &lt;code&gt;&amp;lt;iostream&amp;gt; //input ouput stream&lt;/code&gt; 中的 &lt;code&gt;std::cin&lt;/code&gt; 和 &lt;code&gt;std::cout&lt;/code&gt;）因为它太 &lt;em&gt;臃肿&lt;/em&gt; 了，在使用不当的情况下会拖累程序运行。&lt;/li&gt;
&lt;li&gt;我推荐的是源自 c 语言的 &lt;code&gt;&amp;lt;cstdio&amp;gt; //c standard input ouput&lt;/code&gt; 中的 &lt;code&gt;scanf()&lt;/code&gt; 和 &lt;code&gt;printf()&lt;/code&gt; 函数。&lt;/li&gt;
&lt;li&gt;我们上面已经知道这两个函数需要调用 &lt;code&gt;&amp;lt;cstdio&amp;gt;&lt;/code&gt; 函数，那我们这里会详细的将这两个函数该怎么用：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;printf()&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scanf()&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>从0开始的C&#43;&#43;语言基础00：编译器及C&#43;&#43;环境的设置</title>
        <link>/posts/c&#43;&#43;/cpp-00compilerenvironment/</link>
        <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>/posts/c&#43;&#43;/cpp-00compilerenvironment/</guid>
        <description>&lt;h3 id=&#34;why-为什么要使用编译器和搭建-c-环境&#34;&gt;WHY: 为什么要使用编译器和搭建 C++ 环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;~= 为什么吃饭要使用嘴巴&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-什么是编译器和-c-环境&#34;&gt;WHAT: 什么是编译器和 C++ 环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本小节内容仅供有兴趣者阅读，因为本小节对于竞赛和平时使用并无太大帮助，当然在了解了编译器和环境后对以后的一些 C++ 能够有更深的理解，也有助于以后真正使用 C++ 写程序。&lt;/li&gt;
&lt;li&gt;暂时不想写，先玩算法竞赛，本小节敬请期待。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-如何搭建-c-环境及编译器的选择&#34;&gt;HOW: 如何搭建 C++ 环境及编译器的选择&lt;/h3&gt;
&lt;h4 id=&#34;对于中国体制内参加-noi-的算法竞赛生-dev-cpp&#34;&gt;对于中国体制内参加 &lt;code&gt;NOI&lt;/code&gt; 的算法竞赛生： dev-cpp&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;不要想花里胡哨好玩的编译器了，老老实实给我用 &lt;a class=&#34;link&#34; href=&#34;https://sourceforge.net/projects/orwelldevcpp/files/latest/download&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;dev-cpp&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://sourceforge.net/projects/orwelldevcpp/files/latest/download%ef%bc%81&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://sourceforge.net/projects/orwelldevcpp/files/latest/download！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;该软件是全国统一的竞赛软件（ for c++ ），因此你即使掌握了再多各种软件和各种功能，考试的时候还是得使用 dev-cpp ，那为什么不一开始就使用这个软件呢？&lt;/li&gt;
&lt;li&gt;点击上方即可下载，不要下载最新版。一方面全国的机考都是用该版本 dev-cpp ，另一方面最新版 dev-cpp 已闭源商用。开源就是最好的，那么闭源就是最差的，因此不要用最差的闭源软件。（个人喜欢拿逻辑开玩笑，别介意）&lt;/li&gt;
&lt;li&gt;下载完安装（如果连安装都不会的话就一路点 next 就行）
&lt;ul&gt;
&lt;li&gt;该软件会帮你直接安装好编译器并且搭建好 C++ 环境&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;点击左上角空白的纸打开新的一页，写完程序按f11即可保存并运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他的竞赛生线上考生-vs-code&#34;&gt;其他的竞赛生（线上考生）： vs-code&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;编译器下载
&lt;ul&gt;
&lt;li&gt;一律推荐使用 &lt;a class=&#34;link&#34; href=&#34;https://code.visualstudio.com/download&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;vs-code&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://code.visualstudio.com/download&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://code.visualstudio.com/download&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;首先，这个软件比 dev-cpp 更好用，但是也会更麻烦。因此怕麻烦的话也可以使用上面的 dev-cpp 。&lt;/li&gt;
&lt;li&gt;如果你决定使用 vs-code ，那么恭喜你，你将获得一个可以使用一生的软件。 vs-code 支持所有语言，你还可以把它当作一个 txt 阅读器，上面还有一堆插件，你甚至可以把它折腾成一个 &lt;em&gt;all in one&lt;/em&gt; 的软件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;下载完后安装，没什么需要强调的，上面默认勾选的已经足够正常使用了（如果连安装都不会的话，请仔仔细细看完每个页面的内容，选择自己的需求，然后点击下一步。如果你不愿意那么麻烦的话，那不太建议你使用 vs-code ，可以使用上面 dev-cpp ，毕竟安装连使用的第一步都算不上）&lt;/li&gt;
&lt;li&gt;打开之后在最左边侧栏点击积木（插件 extentions ），搜索框输入 c++ ，找到并点击由 &lt;code&gt;microsoft&lt;/code&gt; 发布的 &lt;code&gt;C/C++&lt;/code&gt;，之后在右边主界面上方点击 &lt;code&gt;Install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;搜索 &lt;code&gt;Code Runner&lt;/code&gt; ，下载由 &lt;code&gt;Jun Han&lt;/code&gt; 发布的 &lt;code&gt;Code Runner&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++环境配置
&lt;ul&gt;
&lt;li&gt;下载并安装&lt;a class=&#34;link&#34; href=&#34;http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe/download&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;mingw64&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe/download&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe/download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;添加 &lt;code&gt;安装路径\mingw64\bin&lt;/code&gt; 至全局变量
&lt;ul&gt;
&lt;li&gt;打开按开始菜单，在搜索框输入 &lt;code&gt;environment&lt;/code&gt; 找到更改全局变量并点击&lt;/li&gt;
&lt;li&gt;在新界面右下角由 &lt;code&gt;全局变量&lt;/code&gt; 点击&lt;/li&gt;
&lt;li&gt;在新界面下方栏找到 &lt;code&gt;Path&lt;/code&gt; 一项双击打开&lt;/li&gt;
&lt;li&gt;右上角点击 &lt;code&gt;新建&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;填入 &lt;code&gt;安装路径\mingw64\bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;OK 保存并退出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编译器配置
&lt;ul&gt;
&lt;li&gt;在代码用文件夹创建 &lt;code&gt;.vscode&lt;/code&gt; 文件夹并创建 &lt;code&gt;tasks.json&lt;/code&gt; ，写入一下内容：（记得替换文件路径）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tasks&amp;#34;&lt;/span&gt;: [{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cppbuild&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C/C++: g++.exe build active file&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;文件路径（记得改为 \\ 形式）\\mingw64\\bin\\g++.exe&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-fdiagnostics-color=always&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-g&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${file}&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-o&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${fileDirname}\\${fileBasenameNoExtension}.exe&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;problemMatcher&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$gcc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;build&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;isDefault&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;创建你的 c++ 文件并点击右上角三角号运行吧！&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>从0开始的C&#43;&#43;语言基础01：函数</title>
        <link>/posts/c&#43;&#43;/cpp-01function/</link>
        <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>/posts/c&#43;&#43;/cpp-01function/</guid>
        <description>&lt;h3 id=&#34;why-为什么不应该先学hello-world&#34;&gt;WHY: 为什么不应该先学“Hello, world”？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我相信更多人想问为什么从函数讲起，而不是从&amp;quot;Hello, world&amp;quot;讲起。原因很简单： &lt;code&gt;Hello, world&lt;/code&gt; 这个程序太“难”了。&lt;/li&gt;
&lt;li&gt;我知道很多人对“难”很有意见。先别急，对于学过的人自己想想，当时在第一次看 &lt;code&gt;Hello, world&lt;/code&gt; 代码时是不是一头雾水？并且被要求死记硬背？&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, world!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;你一定会问： &lt;code&gt;include&lt;/code&gt; 是干什么用的？什么是 &lt;code&gt;namespace&lt;/code&gt; ？为什么要写 &lt;code&gt;int main()&lt;/code&gt; ？&amp;hellip; 这时候教练会说：你先记着，以后就知道了？&lt;/li&gt;
&lt;li&gt;不管你爽不爽，反正一上来就死记硬背我很不爽，理科竞赛应该是自己写的每一个逻辑语句都清清楚楚原理，而不是死记硬背。而且&amp;quot;Hello, world&amp;quot;之所以出名是因为方便检测 &lt;em&gt;编译器&lt;/em&gt; 而不是 &lt;em&gt;用来学习&lt;/em&gt; 。所以，我打算从比 &lt;code&gt;Hello, world&lt;/code&gt; 更简单的程序说起。&lt;/li&gt;
&lt;li&gt;先请看以下程序，这个程序是不是更简洁，不懂的地方是不是也更少？&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;这准确来说并不是程序（虽然编译器不会报错），这是个 &lt;em&gt;函数&lt;/em&gt; ，等价于 &lt;code&gt;f(x) = x + 1&lt;/code&gt; ，这个才应该作为初学者的起点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-比hello-world更简单的程序--函数&#34;&gt;WHAT: 比&amp;quot;Hello, world&amp;quot;更简单的“程序” —— 函数&lt;/h3&gt;
&lt;h4 id=&#34;什么是函数为什么要先学函数&#34;&gt;什么是函数？/为什么要先学函数？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;什么是函数？ &lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;函数&lt;/a&gt; （英语： Function ）是数学描述对应关系的一种特殊集合。&lt;/li&gt;
&lt;li&gt;放心，这么抽象的定义我也看不懂，但是注意下函数的英语： Function 。对，功能。函，同含。因此你可以理解为函数就是包含了一系列功能的“数”。（ p.s. 计算机科学中的函数更偏向功能的意思，因为它削弱了 &lt;em&gt;映射&lt;/em&gt; 的关系，加强了功能性）&lt;/li&gt;
&lt;li&gt;举个例子： &lt;code&gt;f(x) = x + 1&lt;/code&gt; ， &lt;code&gt;f(x)&lt;/code&gt; 这个函数所包含的功能就是把 &lt;code&gt;x&lt;/code&gt; 加上1后输出。&lt;/li&gt;
&lt;li&gt;因此，我们可以发现，所有的答案都可以转化为复杂的函数 &lt;code&gt;f(g(x) + h(y) * u(z))&lt;/code&gt; 等等。把这个过程实现了，就是一个程序了。&lt;/li&gt;
&lt;li&gt;函数的重要性由此彰显，这也就是我们为什么先学函数。函数，就是程序最根本的底层逻辑。或者说， &lt;em&gt;所有的程序由函数组成&lt;/em&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;函数的组成&#34;&gt;函数的组成&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;我们再回来看下这个函数：&lt;code&gt;int f(int x){return x + 1;}&lt;/code&gt; 等价于数学中的 &lt;code&gt;f(x) = x + 1&lt;/code&gt;。接下来，我们来彻底搞懂这个函数：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; ：就相当于先告诉计算机这个 &lt;code&gt;f&lt;/code&gt; 和 &lt;code&gt;x&lt;/code&gt; 是整数（ integer ）&lt;/li&gt;
&lt;li&gt;(&lt;code&gt;int x&lt;/code&gt;)： 输入的值。后面的程序可以直接 &lt;code&gt;f(1)&lt;/code&gt; ， &lt;code&gt;f(2)&lt;/code&gt; 的用函数，此时x等于1，2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return&lt;/code&gt; ：经历一系列计算最终返回的值，等价于数学中最终 &lt;code&gt;f(x)&lt;/code&gt; 的值&lt;/li&gt;
&lt;li&gt;;：分隔符，把几个语句隔开来&lt;/li&gt;
&lt;li&gt;{}：把整个函数“包”起来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;此时你应该有个大概的理解了，但是可能还是有些模糊。那我们再来看下这一个更复杂的函数，我会运用比喻加深下理解：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;第2行：&lt;code&gt;int b&lt;/code&gt; 语句的专业属于叫做 &lt;em&gt;声明(declare)&lt;/em&gt; 。可以理解为计算机是一家有大，中，小胶囊房间的胶囊宾馆。我们预定了名字叫 b 的小型房间。这个房间小到只能装的下整数(int)，比如浮点数(&lt;code&gt;float&lt;/code&gt; ，整数 + 小数)因为有尾巴（小数）因此住不下，而长整数(&lt;code&gt;long long int&lt;/code&gt; ，可以储存更大的整数)因为太胖了也住不下，必须住大型房间。&lt;code&gt;int f&lt;/code&gt; 和 &lt;code&gt;int a&lt;/code&gt; 也是同理。更多的房间类型我们会在以后遇到的时候讲到。目前只要知道 &lt;code&gt;int&lt;/code&gt; 整数就可以了。另外，这里的 &lt;code&gt;int&lt;/code&gt; &lt;code&gt;float&lt;/code&gt; &lt;code&gt;long long int&lt;/code&gt; 叫做 &lt;em&gt;类型（&lt;code&gt;type&lt;/code&gt;）&lt;/em&gt;，这里的 &lt;code&gt;b&lt;/code&gt; &lt;code&gt;f&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; 叫做 &lt;em&gt;变量（&lt;code&gt;variable&lt;/code&gt;）&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;所以，一个 declare 的语句应该是这样的：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type variable;&lt;/code&gt; 例如 &lt;code&gt;int a;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第3行：此时b房间住进了整数1。这里 &lt;code&gt;=&lt;/code&gt; 是 &lt;em&gt;住进&lt;/em&gt; 的意思（专有名词： &lt;em&gt;赋值运算符&lt;/em&gt;），并不是相等的意思，意思就是把 &lt;code&gt;1&lt;/code&gt; 这个值赋给了 b 。&lt;/li&gt;
&lt;li&gt;第4行：把 &lt;code&gt;b&lt;/code&gt; 的值赋给了 &lt;code&gt;a&lt;/code&gt; 。这里我不用住宾馆的比喻是因为如果我说 &lt;code&gt;b&lt;/code&gt; 的 &lt;code&gt;1&lt;/code&gt; 住进了 &lt;code&gt;a&lt;/code&gt; 可能会引起 &lt;code&gt;a&lt;/code&gt; 现在没人的误解。实际上此时 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 里面都是 &lt;code&gt;1&lt;/code&gt; 。可以理解 &lt;code&gt;b&lt;/code&gt; 里住的 &lt;code&gt;1&lt;/code&gt; 分身的另一个 &lt;code&gt;1&lt;/code&gt; 住进了 &lt;code&gt;a&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;第5行：如果充分理解了上面的内容。这里可以理解为 &lt;code&gt;a&lt;/code&gt; 里住的人分身后乘以2（此时1 * 2 = 2）然后住回了 &lt;code&gt;a&lt;/code&gt; 。那 &lt;code&gt;a&lt;/code&gt; 里面原来的 &lt;code&gt;1&lt;/code&gt; 呢？被新来的 &lt;code&gt;2&lt;/code&gt; 赶跑替换掉了。（后来居上）&lt;/li&gt;
&lt;li&gt;第6行： &lt;code&gt;a&lt;/code&gt; 里的 &lt;code&gt;2&lt;/code&gt; 分身后替换掉了 &lt;code&gt;b&lt;/code&gt; 中的 &lt;code&gt;1&lt;/code&gt; ，此时 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 中住的是 &lt;code&gt;2&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;第7行： &lt;code&gt;f(a)&lt;/code&gt; 最终返回的值，返回 &lt;code&gt;a&lt;/code&gt; 中的 &lt;code&gt;2&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;此时我全用专业术语讲一遍：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; 输入 &lt;code&gt;f&lt;/code&gt; 函数，&lt;code&gt;b&lt;/code&gt; 初始化为整数，把 &lt;code&gt;1&lt;/code&gt; 赋值给 &lt;code&gt;b&lt;/code&gt; 。把 &lt;code&gt;b&lt;/code&gt; 中的值赋值给 &lt;code&gt;a&lt;/code&gt; ， &lt;code&gt;a&lt;/code&gt; 自己乘以2，&lt;code&gt;b&lt;/code&gt; 赋值回 &lt;code&gt;a&lt;/code&gt;， 最终函数 &lt;code&gt;f&lt;/code&gt; 返回 &lt;code&gt;a&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果你能看懂，那么恭喜你，你已经 c++ 入门了。可是，你可能会又疑惑，写了这么多函数，虽然没有写程序时候的报错（ compile time error(CE) ，编译时错误），但是运行时后会报错（ runtime error(RE) ，运行时错误）。那程序怎样能运行起来呢？程序又从哪儿开始呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;程序之主--main函数&#34;&gt;程序之主 —— main()函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;再开始前，我要补充下：函数不一定要有输入，例如数学中 &lt;code&gt;f(x) = 1&lt;/code&gt; 作为常函数就不需要输入（虽然数学中的函数更为偏向映射的意思，计算机更偏向功能的意思）。因此写程序时可以直接写 &lt;code&gt;int f(){return 1;}&lt;/code&gt; 而不需要写 &lt;code&gt;int f(int x){return 1;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;我们来看看接下来这个程序：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f(a, b);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;这个程序已经可以运行起来了。但是这个程序有些奇怪：没有输入也没有输出。我们来研究下这个程序：
&lt;ul&gt;
&lt;li&gt;计算机从 &lt;code&gt;main()&lt;/code&gt; 作为主函数（程序的开头）开始运行。但为什么我们先写 &lt;code&gt;f(int x, int y)&lt;/code&gt; 。这就像我们解答数学考卷一样，在使用函数前要先写清楚描述清楚函数。计算机从上往下读取时也得先知道有 &lt;code&gt;f&lt;/code&gt; 这个函数，在后面调用中才知道要往上找来执行。&lt;/li&gt;
&lt;li&gt;这里主函数 &lt;code&gt;return 0&lt;/code&gt; 并不是说为了某个程序调用时返回0，毕竟作为主函数也没有必要返回值 —— 一般在运行中间就得到答案就可以输出了。这里的 &lt;code&gt;return 0&lt;/code&gt; 只是告诉计算机该程序正常运行，没有出错而已。&lt;/li&gt;
&lt;li&gt;注意此时 &lt;code&gt;f&lt;/code&gt; 有两个输入 &lt;code&gt;x&lt;/code&gt;(&lt;code&gt;a&lt;/code&gt;) 和 &lt;code&gt;y&lt;/code&gt;(&lt;code&gt;b&lt;/code&gt;) 返回 &lt;code&gt;x + y&lt;/code&gt; 的值。这是合法的，一个函数可以有多个输入。此时程序等效为 c = a + b (或者 c = 1 + 1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果可以理解了，我们就来看看这个复杂的程序：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; h(i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ...;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    f(i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;你能说出这个程序的运行顺序吗？
&lt;ul&gt;
&lt;li&gt;main -&amp;gt; f -&amp;gt; h -&amp;gt;(此时开始返回值) f -&amp;gt; main&lt;/li&gt;
&lt;li&gt;这有点像搭积木，我们把 main 放在最底下，然后 f 放在 main 上面，最上面放上 h ； h 输出后移走 h 露出 f ， f 输出拿走 f ，最后再到最底下的 main&lt;/li&gt;
&lt;li&gt;这种结构，后进先出（ LIFO, Last In First Out ）（越后面进来的先输出后离开）我们称呼为堆栈（ stack ）这种结构我们后面还会提及，这里有个基本模糊的理解即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-怎么写一个基本的程序&#34;&gt;HOW: 怎么写一个基本的程序？&lt;/h3&gt;
&lt;h4 id=&#34;main-框架&#34;&gt;main() 框架&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;根据上面的内容，我们可以知道一个程序首先要写 &lt;code&gt;main()&lt;/code&gt; 函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;语句&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;我们知道 &lt;code&gt;main()&lt;/code&gt; 的输出并不重要，那为什么我们把 &lt;code&gt;main()&lt;/code&gt; 函数定义为整数 &lt;code&gt;int&lt;/code&gt; ？
&lt;ul&gt;
&lt;li&gt;在讲之前，我希望能够通过这个问题提高大家的 &lt;em&gt;答案寻找能力&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;寻找一个问题的答案需要先 &lt;em&gt;提取关键词&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;关键词： c++ （问题的所属领域） main （问题的对象） why declare int （问题）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;然后选择提问平台
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.google.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;谷歌&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://www.baidu.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;百度&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;知乎&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;stack overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;填入关键词进行搜索&lt;/li&gt;
&lt;li&gt;更多的提问方法可以参考 &lt;a class=&#34;link&#34; href=&#34;https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;提问的智慧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;经过搜索后，你可能会找到该答案：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;The short answer, is because the C++ standard requires main() to return int . As you probably know, the return value from the main() function is used by the runtime library as the exit code for the process. Both Unix and Win32 support the concept of a (small) integer returned from a process after it has finished.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;简单来说，就是早期 c++ 标准时候的规定，当程序返回0时运行正常。&lt;/li&gt;
&lt;li&gt;我通过这个案例的真实目的是强调我 blog 的作用并不是 &lt;em&gt;寻找答案&lt;/em&gt; ，而是提供一个对于知识点可能更好的一种理解，以此提高大家学习的效率。我希望大家向我提出的问题更多是对于理解的疑惑，而不是像这个问题一样本来可以在各种平台上找到答案而偏要浪费大家的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;那么，现在大家会写一个函数的框架了，那么里面的具体运算呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;arithmetic-基础计算运算符&#34;&gt;Arithmetic 基础计算&amp;amp;运算符&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;基本的“+ - * /” 是可以直接用的，例如 &lt;code&gt;a = 1 + 1, a = 1 * 1&lt;/code&gt; 但注意，除法仍然不能除以0，如果除以0会报RE(runtime error)&lt;/li&gt;
&lt;li&gt;在上面我们曾提过，“=” 是赋值运算符而不是 &lt;em&gt;等于&lt;/em&gt; 的意思。就相当于安排房间的意思。那 &lt;em&gt;等于&lt;/em&gt; 要怎么表示呢？实际上，等于并不在基本运算里。如果你有疑惑，请注意，&lt;em&gt;等于&lt;/em&gt; 或者 &lt;em&gt;相等&lt;/em&gt; 实际上是一种判断， &lt;em&gt;a 等于 b&lt;/em&gt; 并不是运算，而是一种判断，判断 a 是和 b 相等的意思。至于判断语句，我们会在后面讲解。目前只需知道 “=” 是赋值运算符即可。&lt;/li&gt;
&lt;li&gt;接下来我们要介绍一种特殊的运算：模运算 &lt;code&gt;%&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;模运算作为数论里重要的一部分，可惜体制内学生连数论的接触也较少。因此我会介绍下模运算，如果学过的可以直接跳过。&lt;/li&gt;
&lt;li&gt;模是在整数运算中求一个整数 x 除以另一个整数 y 的余数的运算，且不考虑运算的商。&lt;/li&gt;
&lt;li&gt;回忆下最初学的除法运算：8 / 5 = 1 ······ 3&lt;/li&gt;
&lt;li&gt;这里 x = 8，y = 5 这里的 3 就是 8 mod 5 的结果&lt;/li&gt;
&lt;li&gt;所以 8 mod 5 = 3&lt;/li&gt;
&lt;li&gt;表达： &lt;code&gt;a = b % c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;还有些常见的定理，可以自行了解：
&lt;ul&gt;
&lt;li&gt;(a ± b) % c = (a % c ± b % c) % c&lt;/li&gt;
&lt;li&gt;(a * b) % c = a % c * (b % c) % c
&lt;ul&gt;
&lt;li&gt;想想除法是否也可以这么用？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(a ^ b) % c = (a % c)^ b % c
&lt;ul&gt;
&lt;li&gt;想想为什么不是^(b % c)？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;其实我挺纠结要不要把总结给写出来。因为总结本来是由大家自行总结并建立体系的一个环节，我希望大家能够自己总结自己学到的东西而不是一味的输入。而且每个人的总结方式有所不同。所以我可能以后会根据情况而定是否总结。&lt;/li&gt;
&lt;li&gt;这里举例两种总结方式：
&lt;ul&gt;
&lt;li&gt;Function:
&lt;ul&gt;
&lt;li&gt;WHY: &amp;hellip;&lt;/li&gt;
&lt;li&gt;WHAT: &amp;hellip;&lt;/li&gt;
&lt;li&gt;HOW: &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Function:
&lt;ul&gt;
&lt;li&gt;declare: type: int &amp;hellip; &amp;amp; name &amp;hellip;&lt;/li&gt;
&lt;li&gt;body: arithmetic: &amp;hellip;&lt;/li&gt;
&lt;li&gt;return: &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;总结的目的是复习自己今天所学知识，能够对自己学到东西的多少有判断并且再次复盘加深印象。每个人适合的总结方法也不同，不一定要按照上面的方式总结，自己通过搜索引擎多试几种方法，找到最适合自己的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;预告&#34;&gt;预告&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我们已经学会了函数的基本写法，也知道程序的主函数 &lt;code&gt;main()&lt;/code&gt; 在运行中已经得到答案了，最后的 &lt;code&gt;return 0&lt;/code&gt; 只是告诉计算机程序正常运行。但是，怎么把答案输出呢？或者怎么把我们想要知道的变量里的数输出呢？这个问题，我们将在下一节得出答案。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;练习&#34;&gt;练习&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;作为第一次练习，我会强调我的练习分为三种程度：知道（ know or KN ） 理解（ understand or US ） 掌握（ master or MT ）&lt;/li&gt;
&lt;li&gt;KN 练习着重于通过练习加深对于本章所讲内容的梳理，是打好基础的必要条件。做出来只能证明你认真的看完了本节内容。&lt;/li&gt;
&lt;li&gt;US 练习对知识点进行了一定的迁移与参数的改变，是继续往下学的必要条件。做出来可以证明你在学习时有进行一定的思考和消化。&lt;/li&gt;
&lt;li&gt;MT 练习对知识点进行深挖和探究，进行了较大的迁移，是学好 c++ 和算法的重要条件。做出来可以证明你在学习时能够内化知识并且建立自己的理解和体系。&lt;/li&gt;
&lt;li&gt;如果 KN 练习做不出来，希望你能够重新好好的看完本节内容再做。如果 US 练习做不出来，可以好好的消化复习本节内容，并通过搜索引擎解决存在的疑惑后再次尝试。如果 MT 练习做不出来，可以对照答案思考自己所欠缺的内容，加深自己的理解后自己重新在做一遍。答案在本章最后或者下章开头。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;kn&#34;&gt;KN&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;请说出下列函数中 &lt;code&gt;a&lt;/code&gt; 的值：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f(a);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;a = 2&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;us&#34;&gt;US&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;请说出下列函数中 &lt;code&gt;a&lt;/code&gt; 的值和运行的顺序：
&lt;ul&gt;
&lt;li&gt;提示：括号里的运算拥有较高优先级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; h(x);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; g(h(x));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f(a);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;1, main() -&amp;gt; f -&amp;gt; h(括号内的先算，直接返回值) -&amp;gt; g -&amp;gt; h -&amp;gt;（开始返回值） g -&amp;gt; f -&amp;gt; main&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mt&#34;&gt;MT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;请写一个函数 &lt;code&gt;f&lt;/code&gt; ，输入为 &lt;code&gt;a, b&lt;/code&gt; ，交换 &lt;code&gt;a, b&lt;/code&gt; 的值后输出
&lt;code&gt;a&lt;/code&gt; ；(所有 type 均为 int)
&lt;ul&gt;
&lt;li&gt;提示：需要引入辅助变量 &lt;code&gt;c&lt;/code&gt; 完成交换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
