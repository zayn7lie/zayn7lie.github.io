<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>headfile on zayn_lie&#39;s blog</title>
        <link>/tags/headfile/</link>
        <description>Recent content in headfile on zayn_lie&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 26 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/headfile/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>从0开始的C&#43;&#43;语言基础02：头文件</title>
        <link>/posts/c&#43;&#43;/2023-02-26-02-headfile/</link>
        <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>/posts/c&#43;&#43;/2023-02-26-02-headfile/</guid>
        <description>&lt;h3 id=&#34;why-为什么我们要使用头文件&#34;&gt;WHY: 为什么我们要使用头文件？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;上节课我们已经了解了函数的结构及作用。实际上，存在这各种各样奇奇怪怪且复杂的函数，例如 &lt;em&gt;打印函数&lt;/em&gt; &lt;code&gt;printf()&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;__format, ...){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; __retval;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __retval &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __mingw_vfprintf( stdout, __format, __local_argv );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __builtin_va_end( __local_argv );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; __retval;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;该函数的作用就是我们上节课提及的 &lt;em&gt;输出&lt;/em&gt; 或者 &lt;em&gt;打印&lt;/em&gt; 函数。而且这一段只是函数的主题部分，还有各种涉及计算机底层端口的各种调用和参数。&lt;/li&gt;
&lt;li&gt;如果我们需要使用自己写一遍绝对是非常没有效率的行为。而且如果真的要求记忆这么大段内容这就不是理科竞赛的目的了。因此， c++ 已经帮我们写好了，而我们只需要通过一些小 tricks 就可以调用这些函数了 —— 使用头文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-什么是头文件&#34;&gt;WHAT: 什么是头文件？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;存储了一些函数的文件，方便我们编写程序。&lt;/li&gt;
&lt;li&gt;一般放在需要调用头文件程序（或函数）的头部（开始）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-怎么使用头文件&#34;&gt;HOW: 怎么使用头文件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt; //调用头文件&amp;lt;cstdio&amp;gt; 该头文件里包含 printf() 函数&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//&amp;#34;Hello, world!&amp;#34;打印出来/输出到终端（屏幕）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;接下来课程，我会在程序中使用 &lt;code&gt;//&lt;/code&gt; 添加注解方便大家的理解，这些 &lt;code&gt;//&lt;/code&gt; 之后的同行内容将被编译器忽略。相似的注解方式还有 &lt;code&gt;/* 注解内容 */&lt;/code&gt; 等。&lt;/li&gt;
&lt;li&gt;我们发现上面的程序多了个 &lt;code&gt;#include&amp;lt;cstdio&amp;gt;&lt;/code&gt; ，头文件的调用就是简简单单通过 &lt;code&gt;#include&amp;lt;头文件&amp;gt;&lt;/code&gt; 来进行的。&lt;/li&gt;
&lt;li&gt;大家发现我们并没有定义 &lt;code&gt;printf()&lt;/code&gt; ，实际上这个函数已经被定义在 &lt;code&gt;cstdio&lt;/code&gt; 头文件里了，所以我们是可以直接使用该函数的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;标准输入输出函数&#34;&gt;标准输入输出函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;接下来，我们将沿着 &lt;code&gt;printf()&lt;/code&gt; 这个重要的函数，讲一讲输入和输出的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;why-为什么存在输入输出还需要标准&#34;&gt;WHY: 为什么存在输入输出，还需要“标准”？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;输入相当于我们把我们的需求输入计算机，计算机最终返回我们需要的结果。&lt;/li&gt;
&lt;li&gt;输入设备和输出设备千奇百怪，什么都有。例如文件输入，终端输入等等。这些输入输出的格式也不一样&lt;/li&gt;
&lt;li&gt;因此，我们需要让程序有统一的输入和输出格式和设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;what-那什么是标准输入输出呢&#34;&gt;WHAT: 那什么是标准输入输出呢？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;标准输入输出是全由终端进行输入和输出的一种方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;how-怎么进行输入输出&#34;&gt;HOW: 怎么进行输入输出？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;首先，我要先说明，我并不推荐有些教练所述通过输入输出流进行输入输出（ &lt;code&gt;&amp;lt;iostream&amp;gt; //input ouput stream&lt;/code&gt; 中的 &lt;code&gt;std::cin&lt;/code&gt; 和 &lt;code&gt;std::cout&lt;/code&gt;）因为它太 &lt;em&gt;臃肿&lt;/em&gt; 了，在使用不当的情况下会拖累程序运行。&lt;/li&gt;
&lt;li&gt;我推荐的是源自 c 语言的 &lt;code&gt;&amp;lt;cstdio&amp;gt; //c standard input ouput&lt;/code&gt; 中的 &lt;code&gt;scanf()&lt;/code&gt; 和 &lt;code&gt;printf()&lt;/code&gt; 函数。&lt;/li&gt;
&lt;li&gt;我们上面已经知道这两个函数需要调用 &lt;code&gt;&amp;lt;cstdio&amp;gt;&lt;/code&gt; 函数，那我们这里会详细的将这两个函数该怎么用：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;printf()&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scanf()&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
