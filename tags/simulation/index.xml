<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>simulation on zayn_lie&#39;s blog</title>
        <link>/tags/simulation/</link>
        <description>Recent content in simulation on zayn_lie&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 02 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/simulation/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>从0开始的算法竞赛01-算法基础00：你真的会分析算法问题吗？</title>
        <link>/posts/algorithm/alg-01basis-00introtoalgorithm/</link>
        <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
        
        <guid>/posts/algorithm/alg-01basis-00introtoalgorithm/</guid>
        <description>&lt;h3 id=&#34;why-为什么要分析算法问题我怎么知道我是分析还是凭感觉&#34;&gt;WHY: 为什么要分析算法问题？我怎么知道我是分析还是凭感觉？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果你真的有这种疑惑，那么你大概率平时是靠感觉解决问题的 —— 我并不是说我们并不能靠感觉解决问题的，且凭感觉解决问题也是很重要的一项技能（凭感觉解决问题其实并不是什么不好的方式，其实就是第六感），凭感觉有着速度快、和经验正相关的精准等优点。但是作为理科竞赛，我更希望凭感觉少些，分析的成分多些。这样在你一些从没有遇到类型的问题你也可以得出正确答案。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-什么是凭感觉什么是靠分析&#34;&gt;WHAT: 什么是凭感觉？什么是靠分析？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;凭感觉准确是指一眼看题目便能不经过任何考虑便知道怎么解决，一个很简单的例子就是 &lt;em&gt;7 * 7 = ？&lt;/em&gt; ，你能够直接回答出乘法口诀表七七四十九。而不是分析：拆分成7个7进行相加。这就是我对凭感觉的定义。另外一个突出的例子就是网上各大媒体流传的《秒杀高考/中考题目》的各种技巧。很显然，凭感觉的最突出优点就是快。但是当问题复杂时（条件不足、没有见到）很容易就没法得出正确答案。&lt;/li&gt;
&lt;li&gt;分析就是形成一套万能的体系机器，无论是什么问题输入机器后通过机器内的逻辑加工都能的出正确答案。例如我在写每一章知识时都将知识拆分成 &lt;em&gt;WHY WHAT HOW&lt;/em&gt; ，这便是 &lt;em&gt;分析&lt;/em&gt; 中的 &lt;em&gt;拆分&lt;/em&gt; 。当然，因为它的通用性导致它的速度肯定不如凭感觉。但是它是最稳定的正确答案输出器，且符合理科竞赛的靠逻辑本质。所以我将在本章详细将如何分析一个算法题目。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-怎么分析一道理科题目&#34;&gt;HOW: 怎么分析一道理科题目？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先，一道理科题目一般由这几个部分组成： &lt;em&gt;背景 主体 数据 样例&lt;/em&gt; 。 我们来看这个样例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Farmer John(FJ) 的奶牛很喜欢学习，他们看到FJ学了编程也想参与其中，但是在阅读编程书籍的时候出现了问题。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 这本编程书籍一上来就要求编译一个程序计算 a + b 的值。但是他们才第一天学，什么都不知道。请问你可以帮助他们写一个样例吗做个示范吗？
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 输入一行a和b，用空格隔开。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 输出一行，输出 a + b 的值。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 样例：输入：1 1 输出：2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 数据范围：0 &amp;lt; a, b &amp;lt; 10^9
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;我们来分析下这个样例：
&lt;ul&gt;
&lt;li&gt;背景：第一行就是背景了（该样例虽然是我自己编的，但是以后看到 Farmer John 和奶牛就可以猜是 &lt;code&gt;USACO&lt;/code&gt; 的题目，这毕竟是他们题目背景的特色）。该背景基本上没啥用，就是放松下，顺便彰显下作为理科生毫无编故事能力。基本可以直接跳过。&lt;/li&gt;
&lt;li&gt;主体：主体在第三行，主体也经常会和背景混杂在一起。对于主体，我们要会提取关键信息。关键信息一般是提出的问题，例如这里“帮助写样例”是关键，而什么样例 —— “a + b 程序” 也成了关键。关键信息的提取一般需要经过训练培养感觉，不要浪费太多时间。&lt;/li&gt;
&lt;li&gt;数据：为什么主体问题提取不要浪费太多时间？因为即使关键提取的较为模糊，数据也会帮你把关键信息打磨干净。这里数据位于4、5和最后一行 —— 包含了输入输出和范围。就算你主体的关键信息没提取清楚，看到输出你也清楚了 —— 就是一个输出 a + b 的程序嘛。至于范围，一般都是在题目的最后。你一般需要利用范围选择合适的结构和数据类型来解决问题。&lt;/li&gt;
&lt;li&gt;样例：样例一般是作为测试的数据。它一般较为简单，方便你调试。用于写完写程序时的模拟和程序后的检验。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我们已经知道了一个题目的结构，接下来就是分析解决问题了：
&lt;ul&gt;
&lt;li&gt;建立模型：就是把实例问题数学化。就类似我们一般会把鸡兔同笼问题转化为二元一次方程一样，这就是模型的建立。&lt;/li&gt;
&lt;li&gt;模拟&amp;amp;拆分：
&lt;ul&gt;
&lt;li&gt;模拟：我们在心里模拟一边代码的大致运行路程，或者说模拟就是题目说什么我们就写什么不做任何优化。例如题目说有一组背包，每个背包重多少时，我们就建立一个数组，把这个数组用来储存背包重量，题目说每个背包减轻了30kg，我们就把数组的每个元素都减30&amp;hellip; 实际上模拟虽然很多教练都特别提出来讲，但是其实没有什么必要 —— 我们每道题实际上都有用到模拟，只是多数情况下在脑中模拟而已。&lt;/li&gt;
&lt;li&gt;拆分：在模拟过后，我们对程序有了个大致的框架想法，这时候就可以把一个大问题拆分成几个小问题了。先把简单的问题解决，难的问题再经过后续步骤得出方案。（更系统的拆分叫做 &lt;em&gt;分治&lt;/em&gt; ，这里就不细说了，有兴趣可以自己了解下。 &lt;em&gt;分治&lt;/em&gt; 还特意加入了合并步骤，更加的科学合理。）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方法选择：对于每个子问题选择最优的方案。实际上，我们接下来讲的各种递归，二分等都是方法，运用在这一步骤。&lt;/li&gt;
&lt;li&gt;代码转化：将方案转化为代码。&lt;/li&gt;
&lt;li&gt;复杂度优化：最后分析是否有更好的结构、方法可以提高代码速度、减少占用空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当然，这种分析只是一个框架，具体问题仍需具体分析。但是，当我们将每个问题放到这个框架中，便可以越来越熟悉，将框架转化为一种习惯或者说感觉。最终达到准确率和速度都提升的效果。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
