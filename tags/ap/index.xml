<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>AP on zayn_lie&#39;s blog</title>
        <link>/tags/ap/</link>
        <description>Recent content in AP on zayn_lie&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 23 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/ap/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Statistic</title>
        <link>/posts/aptest/stat/</link>
        <pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>/posts/aptest/stat/</guid>
        <description>&lt;h2 id=&#34;statisticdata&#34;&gt;Statistic(Data)&lt;/h2&gt;
&lt;h3 id=&#34;collection&#34;&gt;Collection&lt;/h3&gt;
&lt;h4 id=&#34;observation-study&#34;&gt;Observation Study&lt;/h4&gt;
&lt;p&gt;Collecting &lt;em&gt;Sample&lt;/em&gt; from &lt;em&gt;Population&lt;/em&gt; to make inference about the &lt;em&gt;Population&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Method: SRS(simple random sample) - every individual has an equal chance: label - generate n different number - select corresponding individuals&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stratified Random Sampling: SRS individual samples from every group population&lt;/li&gt;
&lt;li&gt;Cluster Random Sampling: SRS cluster samples from cluster population&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Error&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sampling
&lt;ul&gt;
&lt;li&gt;convenience sample
&lt;ul&gt;
&lt;li&gt;overestimate&lt;/li&gt;
&lt;li&gt;underestimate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;voluntary response sample&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Non-Sampling
&lt;ul&gt;
&lt;li&gt;Under coverage&lt;/li&gt;
&lt;li&gt;Nonresponse&lt;/li&gt;
&lt;li&gt;The wording of questions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;experiment-prevent-confounding&#34;&gt;Experiment: prevent confounding&lt;/h4&gt;
&lt;p&gt;$$
Response Variable = a \times Factor(Explanatory Variable) + b \times Confounding Variable(Control)
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Method: Random assignment to each unit -&amp;gt; control -&amp;gt; comparisons -&amp;gt; replication&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blind Experiment&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Placebo Effect&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;census-all-data-collected&#34;&gt;Census: all data collected&lt;/h4&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;h4 id=&#34;one-variable&#34;&gt;One Variable&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Plot&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bar graph&lt;/li&gt;
&lt;li&gt;Histogram&lt;/li&gt;
&lt;li&gt;Stem plot(accurate)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;word&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MACRO
&lt;ul&gt;
&lt;li&gt;shape/distribution
&lt;ul&gt;
&lt;li&gt;uniform&lt;/li&gt;
&lt;li&gt;unimodal: skewed left/symmetric/skewed right&lt;/li&gt;
&lt;li&gt;bimodal&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;spread: range, InterquartileRange(IQR)(resistant), StandartDeviation
&lt;ul&gt;
&lt;li&gt;z-score: $z = \frac{x - mean}{SD}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;micro
&lt;ul&gt;
&lt;li&gt;Outliers: 1.5 times IQR(interquartile range)&lt;/li&gt;
&lt;li&gt;center: (mean &amp;amp;) median(resistant)&lt;/li&gt;
&lt;li&gt;gap: no data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;two-variable&#34;&gt;Two Variable&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Plot&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scatter plots&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;word&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MACRO
&lt;ul&gt;
&lt;li&gt;Direction(correlation r: -1 -(str_nag)- -0.8 - 0.8 -(str_pos) - 1)&lt;/li&gt;
&lt;li&gt;Form &amp;amp; Strength(moderately strong)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;micro: Outliers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Regression&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;s - SD of residual&lt;/li&gt;
&lt;li&gt;R-Sq (square of the correlation coefficient) - proportion of the variability that is accounted for by the linear relationship.&lt;/li&gt;
&lt;li&gt;slope-int: $b \pm t_{\frac{\alpha}{2}(df = n - 2)} \times SE_b$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;probability&#34;&gt;Probability&lt;/h2&gt;
&lt;h3 id=&#34;distribution&#34;&gt;Distribution&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Discrete Distribution&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;types&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Binomial Random Variable(P of k in n happen with A)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;condition: B - Binomial; I - independence; N - n(trails) is certain&lt;/li&gt;
&lt;li&gt;calculator: certain x p - &lt;code&gt;binompdf(&lt;/code&gt;; from 0 to x - &lt;code&gt;binomcdf(&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Geometric Random Variable(&lt;code&gt;P of A&lt;/code&gt; happen when kth in n)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;condition: same as BRV&lt;/li&gt;
&lt;li&gt;shape: skewed right&lt;/li&gt;
&lt;li&gt;calculator: certain x p - &lt;code&gt;geometpdf(&lt;/code&gt;; from 0 to x - &lt;code&gt;geometcdf(&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;calculation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Combine Variable
&lt;ul&gt;
&lt;li&gt;$\bar{x} = \bar{x_1} \pm \bar{x_2}$&lt;/li&gt;
&lt;li&gt;$\sigma = \sqrt{\sigma_1^2 + \sigma_2^2}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transform Variable: $y = ax + b$
&lt;ul&gt;
&lt;li&gt;$\bar{y} = a \bar{x} + b$&lt;/li&gt;
&lt;li&gt;$\sigma_y = a \sigma_x$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Normal Distributions(n -&amp;gt; $\infty$, continuous)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sampling Distribution&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;condition: CLT(Central Limit Theorem): n &amp;gt; 30, normal distribution.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;estimation&#34;&gt;Estimation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;calculate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;confidence level - confidence interval&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;expression&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;state
&lt;ul&gt;
&lt;li&gt;name + definition&lt;/li&gt;
&lt;li&gt;condition
&lt;ul&gt;
&lt;li&gt;Independent
&lt;ul&gt;
&lt;li&gt;n &amp;lt;= 10%N&lt;/li&gt;
&lt;li&gt;normal: n &amp;gt;= 30 or np, n(1 - p) &amp;gt;= 10 or draw stem plot&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;calculation&lt;/li&gt;
&lt;li&gt;conclusion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;test&#34;&gt;Test&lt;/h3&gt;
&lt;p&gt;H_0: p = a
H_0: p &amp;gt; or &amp;lt; or != a&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sample test&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;calculator
&lt;ul&gt;
&lt;li&gt;input
&lt;ul&gt;
&lt;li&gt;n is given: &lt;code&gt;T-Test&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;n is infty or ideal: &lt;code&gt;Z-Test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;output: &lt;code&gt;t&lt;/code&gt; or &lt;code&gt;z&lt;/code&gt;: t-value or z-value &lt;code&gt;p&lt;/code&gt;: p-value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prop test&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;calculator
&lt;ul&gt;
&lt;li&gt;input: &lt;code&gt;1-PropZTest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;output: &lt;code&gt;z&lt;/code&gt;: z-value &lt;code&gt;p&lt;/code&gt;: p-value &lt;code&gt;p-hat&lt;/code&gt;: x / n&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chi-Square&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GoF(Goodness-of-Fit) Tests&lt;/li&gt;
&lt;li&gt;one dimension(Correct or not): Observed list and Expected list&lt;/li&gt;
&lt;li&gt;two dimension(df = (row - 1)(col - 1))
&lt;ul&gt;
&lt;li&gt;Independence or not: $E = \frac{row \cdot col}{total}$&lt;/li&gt;
&lt;li&gt;Homogeneity or not: whether different is the same&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Calculus</title>
        <link>/posts/aptest/calbc/</link>
        <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>/posts/aptest/calbc/</guid>
        <description>&lt;h2 id=&#34;differentiation&#34;&gt;Differentiation&lt;/h2&gt;
&lt;h3 id=&#34;why&#34;&gt;WHY&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Difference between differentiate $\frac{\Delta y}{dx}$ and derivative $y&#39;$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;differentiate is a method to cut source function to know the tendency&lt;/li&gt;
&lt;li&gt;derivative is that kinds of tendency.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At (when), the rate at which (how) is increasing/decreasing by (what) (unit).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Analyzing f is increasing/decreasing/constant on $[a, b]$&lt;/li&gt;
&lt;li&gt;Analyzing points
&lt;ul&gt;
&lt;li&gt;Critical point: $f&amp;rsquo; = 0 \ or \ \nexists f&#39;$&lt;/li&gt;
&lt;li&gt;Stationary point: $f&amp;rsquo; = 0$&lt;/li&gt;
&lt;li&gt;Relative/Local Extrema: $f&amp;rsquo; = 0 \ and \ f&amp;rsquo;&amp;rsquo; \neq 0$&lt;/li&gt;
&lt;li&gt;Inflected point: $f&amp;rsquo;&amp;rsquo; = 0$
&lt;ul&gt;
&lt;li&gt;expression: concave upward(&amp;gt;0)/downward(&amp;lt;0)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;wht-differentiability&#34;&gt;WHT: Differentiability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If and only if $\lim_{x → a^+}f(x) = \lim_{x → a^-}f(x)$, $\lim_{x → a}f(x)$ exists and equals $\lim_{x → a^+}f(x) = \lim_{x → a^-}f(x)$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If and only if $\lim_{x → a}f(x) = f(a)$, we say $f(x)$ is continuous at $x = a$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IVT (Intermediate Value Theorem): If $f(x)$ is &lt;em&gt;continuous&lt;/em&gt; on $[a, b]$, $\exists a, f(a) \in [a, b]$.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MVT (Mean Value Theorem): If $f(x)$ is &lt;em&gt;continuous&lt;/em&gt; and &lt;em&gt;differentiable&lt;/em&gt; on $[a, b]$, $\exists a, f&amp;rsquo;(a) = \frac{f(b) - f(a)}{b - a}$&lt;/li&gt;
&lt;li&gt;EVT (Extreme Value Theorem): If $f(x)$ is &lt;em&gt;continuous&lt;/em&gt;, and it is a close interval on $[a, b]$, $\exists a, b, f_{max} = f(a), f_{min} = f(b)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Discontinuity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Removable ~: $\lim_{x → a}f(x) \neq f(x)$&lt;/li&gt;
&lt;li&gt;Infinite ~: $\lim_{x → a^+}f(x) or \lim_{x → a^-}f(x) = \pm \infty$&lt;/li&gt;
&lt;li&gt;Jump ~: $\lim_{x → a^+}f(x) \neq \lim_{x → a^-}f(x)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If and only if $f(x)$ is continuous at $x = a$ and $lim_{b → 0^+}\frac{f(a + b) - f(a)}{b} = \lim_{b → 0^-}\frac{f(a + b) - f(a)}{b}$ or $\lim_{b → 0}\frac{f(a + b) - f(a)}{b}$ exist, $f(x)$ is differentiable at $x = a$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ep. $f&amp;rsquo;(x)$ not exist while $lim_{x → a}f&amp;rsquo;(x) = \pm \infty$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-differentiating&#34;&gt;HOW: Differentiating&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Approximation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;when use the tangent line at $x = a$ to approximate $f(b)$:&lt;/p&gt;
&lt;p&gt;$$
f(b) = f(a) + f&amp;rsquo;(a)(b - a)
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
(f \pm g)&amp;rsquo; = f&amp;rsquo; \pm g&amp;rsquo;, \
(f \cdot g)&amp;rsquo; = f&amp;rsquo; \cdot g + f \cdot g&amp;rsquo;,\ (\frac{f}{g})&amp;rsquo; = \frac{f&amp;rsquo; \cdot g - f \cdot g&amp;rsquo;}{g^2}, \
RelatedRate: (f(g(x)))&amp;rsquo; = f&amp;rsquo;(g(x)) \cdot g&amp;rsquo;(x) \ or \ \frac{\Delta f}{dx} = \frac{\Delta f}{dg} \cdot \frac{\Delta g}{dx}
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implicit &amp;amp; Explicit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
Implicit \ form:
(xy = 1)&amp;rsquo; → (y + y&amp;rsquo;x = 0) → y&amp;rsquo; = - \frac{y}{x} \
Explicit \ form:
(y = \frac{1}{x})&amp;rsquo; → y&amp;rsquo; = - \frac{1}{x^2}
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inverse&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
(arcsin/cos{x})&amp;rsquo; = \pm \frac{1}{\sqrt{1 - x^2}} \
(arctan{x})&amp;rsquo; = \frac{1}{1 + x^2}
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L&amp;rsquo;Hospital Rule&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When exist fraction with $0$ or $\infty$, we use following rule:
$$
\lim_{x → a}\frac{f(x)}{g(x)} = \lim_{x → a}\frac{f&amp;rsquo;(x)}{g&amp;rsquo;(x)}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;integration&#34;&gt;Integration&lt;/h2&gt;
&lt;h3 id=&#34;why-1&#34;&gt;WHY&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Function Area&lt;/li&gt;
&lt;li&gt;Slope Fields&lt;/li&gt;
&lt;li&gt;Arc Length&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
L = \int_a^b{\sqrt{dx^2 + \Delta{y}^2}} = \int_a^b{\sqrt{1 + (\frac{\Delta{y}}{dx})^2}{dx}}
$$&lt;/p&gt;
&lt;h3 id=&#34;how&#34;&gt;HOW&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Approximating&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trapezoidal Sum: $\sum_{i = 0}^{n - 1}{\frac{(f(x_i) + f(x_{i + 1})) \cdot \frac{b - a}{n}}{2}}$&lt;/li&gt;
&lt;li&gt;Riemann Sum
&lt;ul&gt;
&lt;li&gt;left/right/mid-end: every rectangular&amp;rsquo;s left/right/mid above point start at the curve
&lt;ul&gt;
&lt;li&gt;right-end: $\sum_{i = 1}^{n}{f(x_i) \cdot \frac{b - a}{n}} \ or \ \sum_{k = 1}^{n}{f(a + k \cdot \frac{b - a}{n}) \cdot \frac{b - a}{n}}$&lt;/li&gt;
&lt;li&gt;Integral: $\int_{a}^{b}f(x)dx = lim_{n → \infty}{\sum_{k = 1}^{n}{f(a + k \cdot \frac{b - a}{n}) \cdot \frac{b - a}{n}}}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Euler&amp;rsquo;s Method: $x_{i + 1} = x_i + step, y_{i + 1} = y_i + step \cdot f,(x_i, y_i)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Basic&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Similar to Differentiate
$$
\int_a^b{f(x)dx} = - \int_b^a{f(x)dx} \
\int_a^b{f(x)dx} = \int_a^c{f(x)dx} + \int_c^b{f(x)dx}
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Substitution: multi-functions with its derivative function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember to separate variables&lt;/p&gt;
&lt;p&gt;$$
\int{f(g(x)) \cdot \frac{\Delta}{dx}g(x) dx} = f,(g(x)) + C
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integration by Parts: complex function(from simple derivative) multiply another complex function(its derivative function is simple)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
\int{f(x) \cdot g&amp;rsquo;(x)}{dx} = f(x) \cdot g(x) \mid_{a}^{b}- \int{f&amp;rsquo;(x) \cdot g(x)}{dx}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;sequence&#34;&gt;Sequence&lt;/h2&gt;
&lt;h3 id=&#34;why-2&#34;&gt;WHY&lt;/h3&gt;
</description>
        </item>
        <item>
        <title>Electricity and Magnetism</title>
        <link>/posts/aptest/phyce/</link>
        <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>/posts/aptest/phyce/</guid>
        <description>&lt;h2 id=&#34;electricity&#34;&gt;Electricity&lt;/h2&gt;
&lt;h3 id=&#34;micro&#34;&gt;Micro&lt;/h3&gt;
&lt;h4 id=&#34;force-coulombs-law&#34;&gt;Force: Coulomb&amp;rsquo;s Law&lt;/h4&gt;
&lt;p&gt;$$
|\vec{F_E}| = \frac{1}{4 \pi \epsilon_0} |\frac{q_1 q_2}{r^2}| = \vec{E} \cdot q
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$q_1$ &amp;amp; $q_2$ (Charge): Positive (Glass + Silk) Negative (Plastic + Fur)
&lt;ul&gt;
&lt;li&gt;electrons: neg (e)&lt;/li&gt;
&lt;li&gt;Protons: pos (e)&lt;/li&gt;
&lt;li&gt;neutrons &amp;amp; atoms: neutral&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;field-reason-of-force-gausss-law&#34;&gt;Field (Reason of Force): Gauss&amp;rsquo;s Law&lt;/h4&gt;
&lt;p&gt;$$
\Phi_E(Flux) = \oint{\vec{E}}{d\vec{A}} = \frac{Q}{\epsilon_0} \
Q =
\begin{cases}
\int{\lambda}{dL} \
\int{\sigma}{dA} \
\int{\rho}{dV}
\end{cases}
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\oint{\vec{E}}$ (Gaussian Surface): enclosing with sphere or cylinder
&lt;ul&gt;
&lt;li&gt;Sphere: $\frac{Q}{\epsilon_0 \cdot 4 \pi L^2}$, non-conducting (L &amp;lt; r): $\frac{Q L}{\epsilon_0 \cdot 4 \pi r^3}$&lt;/li&gt;
&lt;li&gt;Cylinder (wire): $\frac{\lambda}{\epsilon_0 \cdot 2 \pi L}$&lt;/li&gt;
&lt;li&gt;Plate: $\frac{\sigma}{\epsilon_0 \cdot 2}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;potential-energy-of-force&#34;&gt;Potential (Energy of Force)&lt;/h4&gt;
&lt;p&gt;$$
W_{a → b} = -\Delta{U}, U = k \frac{q q_0}{r} \
V = \frac{U}{q} = k \frac{q}{r} = E \cdot r
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Equipotential Surfaces&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;macro&#34;&gt;Macro&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Kirchhoff&amp;rsquo;s Rules
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Current rule: for every junction, exists $I = \sum{I_i}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Voltage rule: for every loop, exists $0 = \sum{V_i}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;conductors&#34;&gt;Conductors&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Charge distribution: surface, $\propto$ curvature
&lt;ul&gt;
&lt;li&gt;Electric field: inside = 0, surface: vertical&lt;/li&gt;
&lt;li&gt;Potential: inside: same&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;capacitors&#34;&gt;Capacitors&lt;/h4&gt;
&lt;p&gt;$$
C = \frac{(\kappa) \epsilon_0 A}{d} = \frac{Q}{\Delta{V}}
$$
$Q$: only one plate; $\kappa$: vacuum = 1, others &amp;gt; 1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;other shape: $C = \frac{Q}{E d}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Relationship with time (RC Circuit)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
Charging: \
\epsilon - i R - \frac{q}{C} = 0, i = \frac{d}{dt}{q} \
q = C \epsilon(1 - e^{-\frac{t}{R C}}) \
\
Discharging: \
-\frac{q}{C} - i R = 0, i = \frac{d}{dt}{q},
q = Q_0 e^{-\frac{t}{RC}}
$$
$\tau = R C$ when $t = \tau$, $q = (1 - \frac{1}{e})Q_f$&lt;/p&gt;
&lt;h2 id=&#34;magnetism&#34;&gt;Magnetism&lt;/h2&gt;
&lt;h3 id=&#34;micro-1&#34;&gt;Micro&lt;/h3&gt;
&lt;h4 id=&#34;fields-reason-of-force-amperes-law&#34;&gt;Fields (Reason of Force)： Ampere&amp;rsquo;s Law&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;enclosed loops&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;macro-1&#34;&gt;Macro&lt;/h3&gt;
&lt;h4 id=&#34;inductance&#34;&gt;Inductance&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;RL Similar to RC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
-i R - L \frac{d}{dt}i = 0,
i = I_0 e^{-\frac{t}{L / R}},
\tau = L / R
$$&lt;/p&gt;
&lt;p&gt;Other things could be similar to Electricity&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Mechanics</title>
        <link>/posts/aptest/phycm/</link>
        <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>/posts/aptest/phycm/</guid>
        <description>&lt;h2 id=&#34;motion-and-force&#34;&gt;Motion and Force&lt;/h2&gt;
&lt;h3 id=&#34;basis&#34;&gt;Basis&lt;/h3&gt;
&lt;p&gt;$$
v = \frac{d}{dt}x, a = \frac{d}{dt}v, F = m \cdot a \
\bar{v} = \frac{s}{t} = \frac{v_0 + v}{2}, 2a\Delta{x} = v^2 - v_0^2 \
$$
$x = \vec{Displacement}(vector)$ $s = Distance(scalar)$&lt;/p&gt;
&lt;h3 id=&#34;force&#34;&gt;Force&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Type: Normal Force $n$, Friction $f$, Tension $T$, Weight $w$, &lt;em&gt;Resistive Force&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;v-t relation when Resistive Force exists(v(0) = 0)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
N2L: F = ma = mg - kv, \frac{a}{g - \frac{kv}{m}} = 1 \
\int_0^t{\frac{a}{g - \frac{kv}{m}}}{dt} = \int_0^t{1}{dt} , \int_0^t{-\frac{m}{k} \cdot \frac{-\frac{k}{m} \cdot \frac{d}{dt}v}{g - \frac{k}{m}v}}{dt} = t \
-\frac{m}{k} \cdot ln(g - \frac{k}{m}v) \mid_0^t = t, ln(1 - \frac{k}{mg}v(t)) = -\frac{kt}{m} \
1 - \frac{k}{mg}v(t) = e^{-\frac{kt}{m}}, v(t) = \frac{mg}{k}(1 - e^{-\frac{k}{m}t})
$$&lt;/p&gt;
&lt;h3 id=&#34;energy&#34;&gt;Energy&lt;/h3&gt;
&lt;p&gt;$$
W = \vec{F} \cdot \vec{s}, P = \frac{d}{dt}W = \vec{F} \cdot \vec{v} \
Restoring \ Force: W = \int_{x_1}^{x_2}{-kx}{dx} = \frac{1}{2}k(x_1^2 - x_2^2) \
Work-Energy \ Theorem: K = \frac{1}{2}mv^2, W_{net} = \Delta{K} \
Potential \ Energy: \Delta{U_g} = m\vec{g}\vec{\Delta{x}}, U_s = \frac{1}{2}k\Delta^2{x} \
CoME_{Conservation \ of \ Mechanical \ Energy}: \Delta{E_{mech}} = K + U
$$&lt;/p&gt;
&lt;h3 id=&#34;momentum-and-impulse&#34;&gt;Momentum and Impulse&lt;/h3&gt;
&lt;p&gt;$$
\vec{p} = m \vec{v}, \vec{J} = \int{F}{dt},J = \Delta{p} \
Collision(Elastic): v_1 = \frac{m_1 - m_2}{m_1 + m_2}v_1, v_2 = \frac{m_1 + m_1}{m_1 + m_2}v_1
$$&lt;/p&gt;
&lt;h3 id=&#34;universal-gravitation&#34;&gt;Universal Gravitation&lt;/h3&gt;
&lt;p&gt;$$
G M = v^2 r = g r^2, \frac{T^2}{r^3} = \frac{4 \pi^2}{G M}
$$&lt;/p&gt;
&lt;h2 id=&#34;rotation-and-torque&#34;&gt;Rotation and Torque&lt;/h2&gt;
&lt;p&gt;Similar to Motion and Force&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
Parallel-axis \ Theorem: I = I_0 + M \Delta^2{d} \
Rod: \frac{1}{12} M L^2 \ Sphere: \frac{2}{5} \ Disk: \frac{1}{2} \ Hollow: \frac{2}{3} \ Hoop: 1\
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Synthesize&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
Rolling \ without \ slipping: v_{cm} = r \omega (\alpha, &amp;hellip;) \
Energy: \frac{K_{\omega}}{K_v} = \frac{\frac{1}{2} I \omega^2}{\frac{1}{2} m v^2} = \frac{\frac{I}{r^2}}{m} \
Momentum: \tau \cdot \Delta{t} = \Delta{L}, \vec{L} = \vec{r} \times \vec{p}
$$&lt;/p&gt;
</description>
        </item>
        <item>
        <title>OOP (Objected-Oriented Programming)</title>
        <link>/posts/aptest/csa/</link>
        <pubDate>Fri, 14 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>/posts/aptest/csa/</guid>
        <description>&lt;p&gt;ps. Algorithm is too simple in AP CSA, and there are some similar grammar between java and c++. So I just conclude some basic java grammar instead of all knowledge points in AP testing.&lt;/p&gt;
&lt;h2 id=&#34;class-creation&#34;&gt;Class creation&lt;/h2&gt;
&lt;h3 id=&#34;normal&#34;&gt;Normal&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Access modifier (AM)
&lt;ul&gt;
&lt;li&gt;private: can only access in current object and cannot be inherited&lt;/li&gt;
&lt;li&gt;public: can access in all situation and be inherited&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ClassName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// extends superClass{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// instance variables
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;AM&amp;gt; &amp;lt;Type&amp;gt; &amp;lt;Variable name&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// constructors
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ClassName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; initialValue1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String initialValue2&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// super(iVFromsuperClass)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; initialValue1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; initialValue2&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// if there is another parameter
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ClassName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; initialValue1&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// super(iVFromsuperClass)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; initialValue1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default user&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// a class could with different constructors
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// this called overloading
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// methods
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;methods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; para&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;inheritance&#34;&gt;Inheritance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;superClass&lt;/code&gt; -inheritance-&amp;gt; subClass&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ClassName&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; superClass&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// instance variables
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;AM&amp;gt; &amp;lt;Type&amp;gt; &amp;lt;Variable name&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// it will inheritance public (and protected) variables from superClass
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// static = global variable, if publie, use count through `ClassName.count` instead of `objectName.count`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// constructors
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ClassName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; initialValue1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String initialValue2&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;iVFromsuperClass&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; initialValue1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; initialValue2&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// methods
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;methods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; para&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// toString is from superClass Object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// this is called overriding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// in following methods (super cannot be access outside class) toString() is different from super.toString()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A ob1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A ob2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; B&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ob1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// a method from A
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ob2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// a method from B (override memory)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ob1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// CE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ob2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// CE (memory omit)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ob2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ob1 &lt;span style=&#34;color:#75715e&#34;&gt;// 修改地址的赋值而不是赋值内容
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;All class is the subclass of &lt;code&gt;Object&lt;/code&gt; class&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Object&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// could be overrided and access directly through ClassName();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Boolean &lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Object other&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// return true if object address equals to other
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// String override this method that return true when content is equals to other instead of address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;class-application&#34;&gt;Class application&lt;/h2&gt;
&lt;h3 id=&#34;object&#34;&gt;Object&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;type VariName (= initial)&lt;/code&gt; or &lt;code&gt;class VariName = new class()( or subclass())&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type
&lt;ul&gt;
&lt;li&gt;primitive types: int / double / boolean (true/false)
&lt;ul&gt;
&lt;li&gt;int: ± 2^31 - 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reference types: String / Integer / Double / Boolean
&lt;ul&gt;
&lt;li&gt;String index being from 0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt; cannot call a method(&lt;code&gt;null.equals \\error&lt;/code&gt;) -&amp;gt; &lt;code&gt;null&lt;/code&gt; null is including in address&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt; variable = &lt;code&gt;const&lt;/code&gt; in c++&lt;/li&gt;
&lt;li&gt;I.e. Math() cannot be constructed, only can be use through Math.method()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;method&#34;&gt;Method&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;print: &lt;code&gt;System.out.print(&amp;quot;String\n&amp;quot;);&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;calculate then output:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;System.out.print(7 + 8 + (7 + 8) + &amp;quot;Hello&amp;quot; + 7 + 8 + (7 + 8)) -&amp;gt; &amp;quot;30Hello7815&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;creation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FileName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; type &lt;span style=&#34;color:#a6e22e&#34;&gt;funcName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;type paraName&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        type result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; funcName&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;special-class---array&#34;&gt;Special Class - Array&lt;/h2&gt;
&lt;h3 id=&#34;initialize&#34;&gt;initialize&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Class[] value = new Class[n]; \\ null is inside&lt;/code&gt;
&lt;code&gt;Class[] value = {a, b, c, d}; \\ a b c d is address&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;traversing&#34;&gt;traversing&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;for(int i = 0; i &amp;lt; value.length; i ++) \\ no &amp;quot;()&amp;quot;&lt;/code&gt;
&lt;code&gt;for(int i : value) \\ not change the value just let i equal value&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;special-array&#34;&gt;Special Array&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;/code&gt; (= vector in c++)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;creation: &lt;code&gt;ArrayList&amp;lt;referenceType&amp;gt; VarName = new ArrayList&amp;lt;referenceType&amp;gt;();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2D Arrays&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;initialize
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int[][] value = new int[n][m];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int[] value = { {1, 2}, {3, 4}};&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;traversing(row-major)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for(int i = 0; i &amp;lt; value.length; i ++) for(int j = 0; j &amp;lt; value[0].length; j++)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
